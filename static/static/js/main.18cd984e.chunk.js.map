{"version":3,"sources":["logo.svg","LineChart.js","App.js","reportWebVitals.js","index.js"],"names":["LineChart","dataList","chartRef","gameId","useRef","useState","echartsInstance","setEchartsInstance","useEffect","current","echarts","showLineColor","list","arr","length","colors","start","index","quarter","push","gte","lt","color","lte","gt","minMax","max","min","totalScore","Math","floor","ceil","getMinMax","option","tooltip","trigger","axisPointer","type","xAxis","boundaryGap","data","map","item","moment","Date","time","format","yAxis","position","visualMap","show","dimension","pieces","series","name","setOption","ref","style","width","height","HOST","App","gameList","setGameList","gameData","setGameData","setInterval","a","fetch","res","json","result","curData","game","filter","forEach","element","i","getTime","className","gutter","margin","gameInfo","marginBottom","xs","span","sm","xl","marginRight","homeName","marginLeft","awayName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAAe,I,2CC0FAA,EArFG,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SACdC,GADqC,EAAbC,OACbC,iBAAO,OACxB,EAA8CC,mBAAS,MAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACAC,qBAAU,WACLN,EAASO,SACZF,EAAmBG,IAAaR,EAASO,YAExC,IACH,IAAME,EAAgB,SAACC,GACtB,IAAIC,EAAM,GACV,GAAkB,GAAfD,EAAKE,OAGP,IAFA,IAAIC,EAAS,CAAC,MAAM,QAAQ,OAAO,SAC/BC,EAAQ,EACHC,EAAQ,EAAGA,EAAQL,EAAKE,OAASG,IACtCA,IAAUL,EAAKE,OAAO,GAAMF,EAAKK,GAAOC,SAAWN,EAAKI,GAAOE,UACjEL,EAAIM,KAAK,CAAEC,IAAKJ,EAAOK,GAAIJ,EAAOK,MAAOP,EAAOF,EAAIC,UACpDE,EAAQC,QAIVJ,EAAIM,KAAK,CAACI,IAAK,IAAKD,MAAO,QAC3BT,EAAIM,KAAK,CAACK,GAAI,IAAKD,IAAK,IAAKD,MAAO,UACpCT,EAAIM,KAAK,CAACK,GAAI,IAAKD,IAAK,IAAKD,MAAO,QACpCT,EAAIM,KAAK,CAACK,GAAI,IAAKF,MAAO,UAE3B,OAAOT,GAyDR,OAtCAL,qBAAU,WACT,GAAqB,IAAlBP,EAASa,OAAZ,CACA,IAAIW,EAlBa,SAACb,GAGlB,IAFA,IAAIc,EAAM,EACNC,EAAM,IACDV,EAAQ,EAAGA,EAAQL,EAAKE,OAASG,IACtCL,EAAKK,GAAOW,WAAaF,IAC3BA,EAAMd,EAAKK,GAAOW,YAEhBhB,EAAKK,GAAOW,WAAaD,IAC3BA,EAAMf,EAAKK,GAAOW,YAGpB,MAAO,CAACD,IAAIE,KAAKC,MAAMH,GAAKD,EAAIC,GAAK,GAAGD,IAAIG,KAAKE,KAAKL,GAAKA,EAAKC,GAAK,IAOxDK,CAAU/B,GACjBgC,EAAS,CACdC,QAAS,CACRC,QAAS,OACTC,YAAa,CACZC,KAAM,UAGRC,MAAO,CACND,KAAM,WACNE,aAAa,EAEbC,KAAMvC,EAASwC,KAAI,SAAAC,GAAI,OAAIC,IAAO,IAAIC,KAAKF,EAAKG,OAAOC,OAAO,eAG/DC,MAAO,CACNV,KAAM,QACNV,IAAKF,EAAOE,IACZD,IAAKD,EAAOC,IACZsB,SAAU,QAEXC,UAAW,CACVC,MAAM,EACNC,UAAW,EACXC,OAAQzC,EAAcV,IAEvBoD,OAAQ,CACP,CACCC,KAAM,qBACNjB,KAAM,OACNG,KAAMvC,EAASwC,KAAI,SAAAC,GAAI,OAAIA,EAAKd,iBAIpB,OAAftB,QAAe,IAAfA,KAAiBiD,UAAUtB,MACzB,CAAC3B,EAAiBL,IACd,qBAAKuD,IAAKtD,EAAUuD,MAAO,CAAEC,MAAO,OAAQC,OAAQ,Q,gBChFtDC,EAAO,gBAsEEC,MAnEf,WACE,MAA8BxD,mBAAS,IAAvC,mBAAKyD,EAAL,KAAeC,EAAf,KAEA,EAA8B1D,mBAAS,IAAvC,mBAAK2D,EAAL,KAAeC,EAAf,KA0CA,OAzCAzD,qBAAU,WACR0D,YAAW,sBAAC,8BAAAC,EAAA,+EAEQC,MAAM,UAAD,OAAWR,EAAX,mBAFb,cAEJS,EAFI,gBAGWA,EAAIC,OAHf,OAGJC,EAHI,OAIRR,EAAYQ,EAAM,MAJV,4GAWT,OACF,IAEH/D,oBAAS,sBAAC,0CAAA2D,EAAA,sDACJK,EAAU,GADN,cAESV,GAFT,gEAECW,EAFD,iBAIAtE,EAASsE,EAAKtE,OAJd,UAKYiE,MAAM,UAAD,OAAWR,EAAX,sBAA6BzD,IAL9C,eAKAkE,EALA,iBAMeA,EAAIC,OANnB,QAMAC,EANA,OAOAG,EAAS,GACbH,EAAOI,SAAQ,SAACC,EAAQC,IACX,IAANA,GAEOH,EAAOA,EAAO5D,OAAO,GAAGc,YAAcgD,EAAQhD,YAAc8C,EAAOA,EAAO5D,OAAO,GAAGI,SAAW0D,EAAQ1D,SAAW,IAAI0B,KAAKgC,EAAQ/B,MAAMiC,UAAa,IAAIlC,KAAK8B,EAAOA,EAAO5D,OAAO,GAAG+B,MAAMiC,WAAa,QADlNJ,EAAOvD,KAAKyD,MAKlBJ,EAAQrE,GAAUuE,EAfd,iMAuBRT,EAAYO,GAvBJ,uEAwBP,CAACV,IAGF,qBAAKiB,UAAU,MAAf,SACE,cAAC,IAAD,CAAKC,OAAQ,GAAIC,OAAQ,EAAzB,SACGnB,EAASrB,KAAI,SAAAyC,GAAQ,OAClB,eAAC,IAAD,CAAKH,UAAU,aAAatB,MAAO,CAAC0B,aAAc,IAAKC,GAAI,CAACC,KAAM,IAAKC,GAAI,CAACD,KAAM,IAAKE,GAAI,CAACF,KAAM,GAAlG,UACE,iCACGH,EAAS5B,OAEZ,mCACE,sBAAMG,MAAO,CAAC+B,YAAa,GAAIlE,MAAO,WAAtC,SAAmD4D,EAASO,WAD9D,KAGE,sBAAMhC,MAAO,CAACiC,WAAY,GAAIpE,MAAO,WAArC,SAAkD4D,EAASS,cAE7D,cAAC,EAAD,CAAWxF,OAAQ+E,EAAS/E,OAAQF,SAAU+D,EAASkB,EAAS/E,SAAW,gBCxD1EyF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.18cd984e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useRef, useState } from 'react';\r\nimport moment from 'moment';\r\nimport * as echarts from 'echarts';\r\n\r\n\r\nconst LineChart = ({ dataList, gameId }) => {\r\n\tconst chartRef = useRef(null)\r\n\tconst [echartsInstance, setEchartsInstance] = useState(null)\r\n\tuseEffect(() => {\r\n\t\tif (chartRef.current) {\r\n\t\t\tsetEchartsInstance(echarts.init(chartRef.current))\r\n\t\t}\r\n\t}, [])\r\n\tconst showLineColor = (list) => {\r\n\t\tlet arr = []\r\n\t\tif(list.length != 0) {\r\n\t\t\tlet colors = ['red','green','blue','black']\r\n\t\t\tvar start = 0\r\n\t\t\tfor (let index = 0; index < list.length ; index++) {\r\n\t\t\t\tif(index === list.length-1  || list[index].quarter != list[start].quarter) {\r\n\t\t\t\t\tarr.push({ gte: start, lt: index, color: colors[arr.length]})\r\n\t\t\t\t\tstart = index\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tarr.push({lte: 100, color: \"red\"})\r\n\t\t\tarr.push({gt: 100, lte: 200, color: \"green\"})\r\n\t\t\tarr.push({gt: 200, lte: 300, color: \"red\"})\r\n\t\t\tarr.push({gt: 300, color: \"black\"})\r\n\t\t}\r\n\t\treturn arr\r\n\t}\r\n\r\n\tconst getMinMax = (list) =>{\r\n\t\tvar max = 0\r\n\t\tvar min = 500\r\n\t\tfor (let index = 0; index < list.length ; index++) {\r\n\t\t\tif(list[index].totalScore > max) {\r\n\t\t\t\tmax = list[index].totalScore;\r\n\t\t\t} \r\n\t\t\tif(list[index].totalScore < min) {\r\n\t\t\t\tmin = list[index].totalScore;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {min:Math.floor(min-(max-min)/5),max:Math.ceil(max+(max -min)/5)}\r\n\t}\r\n\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tif(dataList.length===0) return\r\n\t\tlet minMax = getMinMax(dataList)\r\n\t\tconst option = {\r\n\t\t\ttooltip: {\r\n\t\t\t\ttrigger: 'axis',\r\n\t\t\t\taxisPointer: {\r\n\t\t\t\t\ttype: 'cross'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\txAxis: {\r\n\t\t\t\ttype: 'category',\r\n\t\t\t\tboundaryGap: false,\r\n\t\t\t\t// prettier-ignore\r\n\t\t\t\tdata: dataList.map(item => moment(new Date(item.time)).format('h:mm:ss')),\r\n\t\t\t\r\n\t\t\t},\r\n\t\t\tyAxis: {\r\n\t\t\t\ttype: 'value',\r\n\t\t\t\tmin: minMax.min,\r\n\t\t\t\tmax: minMax.max,\r\n\t\t\t\tposition: 'left'\r\n\t\t\t},\r\n\t\t\tvisualMap: {\r\n\t\t\t\tshow: false,\r\n\t\t\t\tdimension: 0,\r\n\t\t\t\tpieces: showLineColor(dataList)\r\n\t\t\t},\r\n\t\t\tseries: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: '总得分',\r\n\t\t\t\t\ttype: 'line',\r\n\t\t\t\t\tdata: dataList.map(item => item.totalScore)\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t};\r\n\t\techartsInstance?.setOption(option)\r\n\t}, [echartsInstance, dataList])\r\n\treturn <div ref={chartRef} style={{ width: '100%', height: 400 }}></div>\r\n};\r\n\r\nexport default LineChart;","import logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css'\nimport LineChart from './LineChart';\nimport React, { useState, useEffect } from 'react';\nimport { notification, Row, Col } from 'antd';\n\nconst HOST = '182.92.223.34' // \"47.93.48.15\" //\n// const HOST = document.location.host.split(\":\")[0] // \"47.93.48.15\" //\n\nfunction App() {\n  let [gameList, setGameList] = useState([])\n\n  let [gameData, setGameData] = useState({})\n  useEffect(() => {\n    setInterval(async () => {\n      try {\n        let res = await fetch(`http://${HOST}:8080/gameList`)\n        let result = await res.json()\n        setGameList(result[\"info\"]) \n      } catch (err) {\n        // notification.open({\n        //   message: '服务端错误',\n        //   description: err,\n        // });\n      }\n    }, 2000)\n  }, [])\n\n  useEffect(async () => {\n    let curData = {}\n    for (let game of gameList) {\n      try {\n        let gameId = game.gameId\n        let res = await fetch(`http://${HOST}:8080/game/${gameId}`)\n        let result = await res.json()\n        var filter = []\n        result.forEach((element,i)=> {\n            if(i === 0) {\n              filter.push(element)\n            } else if(filter[filter.length-1].totalScore != element.totalScore || filter[filter.length-1].quarter != element.quarter || new Date(element.time).getTime() -  new Date(filter[filter.length-1].time).getTime() >= 1000*59+500) {\n              filter.push(element)\n            }\n        });\n        curData[gameId] = filter\n      } catch(err) {\n        // notification.open({\n        //   message: '服务端错误',\n        //   description: err,\n        // });\n      }\n    }\n    setGameData(curData)\n  }, [gameList])\n\n  return (\n    <div className=\"App\">\n      <Row gutter={16} margin={0}>\n        {gameList.map(gameInfo => (\n            <Col className=\"gutter-row\" style={{marginBottom: 10}} xs={{span: 24}} sm={{span: 12}} xl={{span: 8}}>\n              <header>\n                {gameInfo.name}\n              </header>\n              <header>\n                <span style={{marginRight: 10, color: \"#0066cc\"}}>{gameInfo.homeName}</span>\n                VS\n                <span style={{marginLeft: 10, color: \"#cc0000\"}}>{gameInfo.awayName}</span>\n              </header>\n              <LineChart gameId={gameInfo.gameId} dataList={gameData[gameInfo.gameId] || []}/>\n            </Col>\n        ))}\n      </Row>\n      \n    </div>\n  );\n}\n\nexport default App;  \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}